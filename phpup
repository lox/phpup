#!/usr/bin/env php
<?php

/**
 * Generates a minimal apache config to serve a php file, or a directory
 * @author Lachlan Donald <lachlan@ljd.cc>
 */

$args = array();
$opts = array();

// process arguments
for($i=1; $i<$argc; $i++)
{
	if(preg_match('/^-(p)$/',$argv[$i]) && isset($argv[$i+1]))
		$opts[$argv[$i]] = $argv[++$i];
	else
		$args[] = $argv[$i];
}

if(in_array('--help', $args))
{
	echo "usage: phpup [-p port] [-o] [file or dir...] \n\n";
	echo " -p port  -  use an alternate port, defaults to 8000\n";
	echo " -o       -  open the url in your browser under OSX\n";
	exit(1);
}

// serve cwd
if(empty($args))
{
	$file = false;
	$dir = getcwd();
}
// serve either a file or a directory
else if(is_file($args[0]))
{
	$file = realpath($args[0]);
	$dir = dirname($file);
}
else if(is_dir($args[0]))
{
	$file = false;
	$dir = realpath($args[0]);
}
else
{
	die("{$args[0]} not readable");
}

$tmpdir = rtrim(sys_get_temp_dir(),'/');
$port = isset($opts['-p']) ? $opts['-p'] : 8000;
$uid = getmyuid();
$passwd = posix_getpwuid($uid);
$user = $passwd["name"];

// ----------------------------
// env setups

$binary = exec('which httpd') ?: exec('which apache2');

$possiblemoduledirs = array(
	exec('php-config --prefix').'/libexec/apache2', // compiled PHP default
	'/usr/lib/apache2/modules', // Ubuntu
	'/usr/libexec/apache2', // MacOS X
);
$modulesdirs = array();
foreach($possiblemoduledirs as $d)
	if(is_dir($d)) $modulesdirs[] = $d;

if(empty($binary)) die("Unable to detect apache binary");
if(empty($modulesdirs)) die("Unable to detect apache modules directory");

$modulesconf = '';
$compiled = array_map('trim', explode("\n", `$binary -l | grep .c`));
$modules = array(
	'mime_module' => 'mod_mime',
	'php5_module' => 'libphp5',
	'log_config_module' => 'mod_log_config',
	'rewrite_module' => 'mod_rewrite',
	'dir_module' => 'mod_dir',
	'alias_module' => 'mod_alias',
	'authz_host_module' => 'mod_authz_host',
	'env_module' => 'mod_env',
);

// detect non-compiled modules
foreach($modules as $m=>$so)
{
	if(!in_array("{$so}.c", $compiled))
	{
		// search module dirs for module file
		foreach ($modulesdirs as $d)
		{
			$modulepath = sprintf("%s/%s.so", $d, $so);
			if (is_file($modulepath)) break;
			$modulepath = "";
		}
		if ($modulepath)
			$modulesconf .= sprintf("LoadModule %s %s\n", $m, $modulepath, $so);
		else
			printf(">> Warning: Module %s wasn't found\n", $so);
	}
}

$apachedir = $tmpdir."/.phpup{$port}";

printf(">> building local apache instance with %s\n", $file ? $file : $dir);

if(is_dir($apachedir))
	`rm -rf $apachedir`;

mkdir($apachedir, 0700, true);

$config = <<<"APACHECONF"
ServerRoot $apachedir
PidFile httpd.pid
ScoreBoardFile httpd.scoreboard
LockFile accept.lock
HostnameLookups off
User {$user}
ServerSignature Off
UseCanonicalName Off
Timeout 50
KeepAlive On
MaxKeepAliveRequests 40
KeepAliveTimeout 5
ServerName phpup
StartServers 16
MinSpareServers 16
MaxSpareServers 32
ServerLimit 400
MaxClients 400
MaxRequestsPerChild 10000
Listen *:$port
DocumentRoot $dir
DirectoryIndex index.php index.phtml index.html index.htm

$modulesconf

AddHandler php5-script .php
LogFormat "%h %l %u %t \"%r\" %>s %b" common
CustomLog "access.log" common
ErrorLog "error.log"
LogLevel warn\n
APACHECONF;

if(file_exists('/etc/mime.types'))
	$config .= "TypesConfig /etc/mime.types\n\n";

if($file)
{
	$config .= <<<"REWRITECONF"
DocumentRoot {$dir}
RewriteEngine On
RewriteCond {$dir}/%{REQUEST_FILENAME} !-f
RewriteRule .* /{$file} [L,QSA]\n
REWRITECONF;
}
else
{
	$config .= <<<"DIRCONFIG"
<Directory $dir>
Options All Indexes FollowSymLinks MultiViews
AllowOverride all
</Directory>\n
DIRCONFIG;
}

file_put_contents("$apachedir/apache.conf", $config);
printf(">> starting apache on *:%d as %s\n", $port, $user);

$cmd = "$binary -f apache.conf -d $apachedir -D FOREGROUND";

if (function_exists("pcntl_sigprocmask"))
  pcntl_sigprocmask(SIG_BLOCK, array(SIGWINCH));

$handle = popen($cmd, "r");

if (function_exists("pcntl_sigprocmask"))
  pcntl_sigprocmask(SIG_BLOCK, array(SIGWINCH));

printf(">> listening (http://localhost:%d)...\n", $port);

if(in_array('-o', $args))
	`open 'http://localhost:$port'`;

sleep(2);
$accesslog = popen("tail -f -q $apachedir/error.log $apachedir/access.log 2>&1", 'r');
while(!feof($accesslog))
{
	$line = fgets($accesslog);

	// notices can't be supressed
	if(!preg_match('/\[notice\]/', $line))
		echo $line;
}
